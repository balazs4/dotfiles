// vim: ft=javascript

global.i3windows = (json) => {
  const select = (item, parent) => {
    if (item.window_type !== "normal") return null;
    return [
      item.id,
      parent.name.padStart(2, ' '),
      item.window_properties.instance.padEnd(16, ' '),
      item.window_properties.title,
    ].join("  ");
  };
  const traverse = (item, parent = null) => {
    return [
      select(item, parent),
      ...item.nodes
        .map((child) =>
          traverse(child, item.type === "workspace" ? item : parent)
        )
        .flat(),
    ];
  };
  return traverse(json).filter(Boolean).join("\n");
};

const find = (predicate) => (level) => {
  if (predicate(level)) return level;
  const [found = null] = level.nodes.map((node) => find(predicate)(node)).filter((x) => x);
  return found;
};

//vmware global.slack = (json) => {
//vmware   const predicate = (node) => node.window_type === 'normal' && /slack/gi.test(node.window_properties.title);
//vmware   const found = find(predicate)(json);
//vmware   if (found === null) return '';
//vmware   const title = found.window_properties.title;
//vmware   const [name, , , notification = null] = title.split('|').map((x) => x.trim());
//vmware   const txt = notification === null ? name : notification;
//vmware   return `<span ${notification !== null ? 'background="#ddd" color="#222" font-weight="bold"' : ''}>${txt}</span>`;
//vmware };
//vmware 
//vmware global.teams = (json) => {
//vmware   const predicate = (node) => node.window_type === 'normal' && /Teams/gi.test(node.window_properties.title);
//vmware   const found = find(predicate)(json);
//vmware   if (found === null) return '';
//vmware   const title = found.window_properties.title;
//vmware   const [status, app] = title.split('|').map((x) => x.trim());
//vmware   const [count] = status.match(/\(\d+\)/) || [null];
//vmware   return count === null
//vmware     ? `<span>${app}</span>`
//vmware     : `<span background="#ddd" color="#222" font-weight="bold">${count} ${app}</span>`;
//vmware };
//vmware 
//vmware global.jira = json => {
//vmware   const [ issue ] = json.body.issues;
//vmware   if (!issue) return 'Not found';
//vmware   const weburl = issue.self.replace(/\/rest\/api\/.*/, `/browse/${issue.key}`);
//vmware 
//vmware   return `
//vmware 
//vmware # JIRA
//vmware 
//vmware ## ${issue.key} ${issue.fields.summary} 
//vmware 
//vmware [${issue.fields.status.name.toUpperCase()}](${weburl})  
//vmware 
//vmware > assignee: ${issue.fields.assignee.displayName} 
//vmware > reporter: ${issue.fields.reporter.displayName}
//vmware > labels: ${issue.fields.labels.join(", ")}
//vmware 
//vmware ${issue.fields.description ? issue.fields.description.replace(/\(\/\)/g,"✅").replace(/\(x\)/, "❌") : 'no descrtiption'}
//vmware 
//vmware ${weburl}
//vmware   `;
//vmware }
//vmware 
//vmware global.rapid = json => {
//vmware   const {issues} = json.body.issuesData;
//vmware   const by = (...keys) => (a,b) => {
//vmware     return keys.reduce((result, key) => {
//vmware       if (result !== 0) return result;
//vmware       if (a[key] === b[key]) return 0;
//vmware       return a[key] > b[key] ? 1 : -1;
//vmware     }, 0);
//vmware   }
//vmware   return issues.map(i => ({...i, project: i.key.split("-")[0]})).sort(by()).map(issue => [issue.key.padEnd(8, " "), issue.statusName.padEnd(12, " "), issue.assignee.padEnd(8, " "), issue.summary, issue.epicField ? `#${issue.epicField.text}` : '#epicless' ].join("\t") ).join("\n");
//vmware }

//carbon global.youtubevideos = json => {
//carbon   const findarrays = (obj) => {
//carbon     if (obj.length) return obj;
//carbon     return Object.values(obj).map(child => findarrays(child)).flat();
//carbon   }
//carbon   const arrays = findarrays(json).flat();
//carbon   if (arrays === null || arrays === undefined) return undefined;
//carbon   const videos = arrays.find(x => x?.itemSectionRenderer?.contents.find(xx => xx?.videoRenderer))?.itemSectionRenderer?.contents;
//carbon   if (videos === null || videos === undefined) return undefined;
//carbon   return videos
//carbon     .filter(x => x?.videoRenderer?.videoId)
//carbon     .filter(x=>x)
//carbon     .map(x => [x.videoRenderer.videoId, x.videoRenderer?.title?.accessibility?.accessibilityData?.label].join("\t"))
//carbon     .join("\n");
//carbon }
