// vim: ft=javascript

global.i3windows = (json) => {
  const select = (item, parent) => {
    if (item.window_type !== "normal") return null;
    return [
      item.id,
      parent.name.padStart(2, ' '),
      item.window_properties.instance.padEnd(16, ' '),
      item.window_properties.title,
    ].join("  ");
  };
  const traverse = (item, parent = null) => {
    return [
      select(item, parent),
      ...item.nodes
        .map((child) =>
          traverse(child, item.type === "workspace" ? item : parent)
        )
        .flat(),
    ];
  };
  return traverse(json).filter(Boolean).join("\n");
};

const find = (predicate) => (level) => {
  if (predicate(level)) return level;
  const [found = null] = level.nodes.map((node) => find(predicate)(node)).filter((x) => x);
  return found;
};

global.youtubevideos = json => {
  const findarrays = (obj) => {
    if (obj.length) return obj;
    return Object.values(obj).map(child => findarrays(child)).flat();
  }
  const arrays = findarrays(json).flat();
  if (arrays === null || arrays === undefined) return undefined;
  const videos = arrays.find(x => x?.itemSectionRenderer?.contents.find(xx => xx?.videoRenderer))?.itemSectionRenderer?.contents;
  if (videos === null || videos === undefined) return undefined;
  return videos
    .filter(x => x?.videoRenderer?.videoId)
    .filter(x=>x)
    .map(x => [x.videoRenderer.videoId, x.videoRenderer?.title?.accessibility?.accessibilityData?.label].join("\t"))
    .join("\n");
}
