git_protocol: ssh
aliases:
    docs: '!xdg-open https://docs.github.com/en/free-pro-team@latest/rest/reference'
    _release: >-
      !gh api /repos/:owner/:repo/releases\?per_page=1 | npx fx 'x=>x.map(xx => [require("ago")(xx.published_at), xx.html_url].join("\t")).join("\n")'
    _actions: >-
      !gh api repos/:owner/:repo/actions/runs\?per_page=10\&branch=`git rev-parse --abbrev-ref HEAD` | npx -q fx 'xx=>xx.workflow_runs.map(x=>[ (x.conclusion || x.status).padEnd(8, " "), require("ago")(x.created_at), x.head_commit.id, x.html_url].join("\t")).join("\n")'
    _action: >-
      !gh api repos/:owner/:repo/actions/runs\?per_page=1\&branch=`git rev-parse --abbrev-ref HEAD` | npx -q fx 'xx=>xx.workflow_runs.map(x=>[ (x.conclusion || x.status).padEnd(8, " "), x.head_repository.full_name, x.head_commit.id, x.html_url].join("\t")).join("\n")'
    _notify: >-
      !fn(){
        while [[ `gh _action | grep 'queued\|in_progress'` ]]; do sleep ${SLEEP:-5s}; done
        output=`gh _action`
        outcome=`echo $output | cut -f1 -d" "`
        project=`echo $output | cut -f2 -d" "`
        commit=`echo $output | cut -f3 -d" "`
        url=`echo $output | cut -f4 -d" "`
        message=`git log --format=%B -n 1 $commit`
        color=`echo $outcome | sed -r 's/\s//g;s/success/A3BE8C/g;s/failure/BF616A/g'`
        [[ -f /tmp/github-action-$color.svg ]] || `curl -Lks https://cdn.svgporn.com/logos/github-icon.svg | sed "s/#161614/#${color:-161614}/g" > /tmp/github-action-$color.svg`
        click=`dunstify --action="default,open" -I /tmp/github-action-$color.svg "$project" "$outcome\n$commit\n$message"`
        [[ $click = 'default' ]] && xdg-open $url >/dev/null
      };fn &

    _review: >-
      !gh api graphql -f query="
          {
            search(query: \"type:pr state:open review-requested:${1:-$USER}\", type: ISSUE, first: 100) {
              edges {
                node {
                  ... on PullRequest {
                    title
                    url
                    updatedAt
                  }
                }
              }
            }
          }
      " | npx -q fx 'x => x.data.search.edges.map(xx=> [xx.node.updatedAt, xx.node.url, xx.node.title].join("\t")).join("\n")' | sort -r

    _author: >-
      !gh api graphql -f query="
          {
            search(query: \"type:pr state:open author:${1:-$USER}\", type: ISSUE, first: 100) {
              edges {
                node {
                  ... on PullRequest {
                    title
                    url
                    updatedAt
                    reviews(first: 20){
                     nodes{
                       author{
                         ... on User{
                           login
                         }
                       }
                       state
                     }
                    }
                  }
                }
              }
            }
          }
      " | npx -q fx 'x => x.data.search.edges.map(xx=> [xx.node.updatedAt, xx.node.url, xx.node.title, ">>>>>", xx.node.reviews.nodes.map(xxx => `${xxx.state.replace("APPROVED", "✅").replace("COMMENTED", "🗨️")} ${xxx.author.login}`)].flat().join("\t")).join("\n")' | sort -r
